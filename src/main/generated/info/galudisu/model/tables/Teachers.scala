/*
 * This file is generated by jOOQ.
 */
package info.galudisu.model.tables


import info.galudisu.model.Indexes
import info.galudisu.model.Keys
import info.galudisu.model.Timetable
import info.galudisu.model.tables.records.TeachersRecord

import java.lang.Class
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.TableImpl

import scala.Array


object Teachers {

  /**
   * The reference instance of <code>timetable.teachers</code>
   */
  val TEACHERS = new Teachers
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.12.4"
  ),
  comments = "This class is generated by jOOQ"
)
class Teachers(
  alias : Name,
  child : Table[_ <: Record],
  path : ForeignKey[_ <: Record, TeachersRecord],
  aliased : Table[TeachersRecord],
  parameters : Array[ Field[_] ]
)
extends TableImpl[TeachersRecord](
  alias,
  Timetable.TIMETABLE,
  child,
  path,
  aliased,
  parameters,
  DSL.comment("")
)
{

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[TeachersRecord] = {
    classOf[TeachersRecord]
  }

  /**
   * The column <code>timetable.teachers.id</code>.
   */
  val ID : TableField[TeachersRecord, String] = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), "")

  /**
   * The column <code>timetable.teachers.first_name</code>.
   */
  val FIRST_NAME : TableField[TeachersRecord, String] = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR(64), "")

  /**
   * The column <code>timetable.teachers.last_name</code>.
   */
  val LAST_NAME : TableField[TeachersRecord, String] = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR(64), "")

  /**
   * The column <code>timetable.teachers.create_time</code>.
   */
  val CREATE_TIME : TableField[TeachersRecord, Timestamp] = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "")

  /**
   * The column <code>timetable.teachers.modify_time</code>.
   */
  val MODIFY_TIME : TableField[TeachersRecord, Timestamp] = createField(DSL.name("modify_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), "")

  /**
   * Create a <code>timetable.teachers</code> table reference
   */
  def this() = {
    this(DSL.name("teachers"), null, null, null, null)
  }

  /**
   * Create an aliased <code>timetable.teachers</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), null, null, info.galudisu.model.tables.Teachers.TEACHERS, null)
  }

  /**
   * Create an aliased <code>timetable.teachers</code> table reference
   */
  def this(alias : Name) = {
    this(alias, null, null, info.galudisu.model.tables.Teachers.TEACHERS, null)
  }

  private def this(alias : Name, aliased : Table[TeachersRecord]) = {
    this(alias, null, null, aliased, null)
  }

  def this(child : Table[_ <: Record], key : ForeignKey[_ <: Record, TeachersRecord]) = {
    this(Internal.createPathAlias(child, key), child, key, info.galudisu.model.tables.Teachers.TEACHERS, null)
  }

  override def getSchema : Schema = Timetable.TIMETABLE

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.TEACHERS_PRIMARY)
  }

  override def getPrimaryKey : UniqueKey[TeachersRecord] = {
    Keys.KEY_TEACHERS_PRIMARY
  }

  override def getKeys : List[ UniqueKey[TeachersRecord] ] = {
    return Arrays.asList[ UniqueKey[TeachersRecord] ](Keys.KEY_TEACHERS_PRIMARY)
  }

  override def as(alias : String) : Teachers = {
    new Teachers(DSL.name(alias), this)
  }

  override def as(alias : Name) : Teachers = {
    new Teachers(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Teachers = {
    new Teachers(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Teachers = {
    new Teachers(name, null)
  }

  // -------------------------------------------------------------------------
  // Row5 type methods
  // -------------------------------------------------------------------------

  override def fieldsRow : Row5[String, String, String, Timestamp, Timestamp] = {
    super.fieldsRow.asInstanceOf[ Row5[String, String, String, Timestamp, Timestamp] ]
  }
}
